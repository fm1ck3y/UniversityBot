from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType,VkBotMessageEvent
from config import *
from database import *
from keyboard import *
from threading import Thread
import logging
from vk_api.utils import get_random_id
from NNGU import *
import schedule
import time
import json

logging.basicConfig(format='%(asctime)s %(message)s',filename='logger.log')
vk_session = vk_api.VkApi(token=VK_API_ACCESS_TOKEN)
vk = vk_session.get_api()

def handler_command(message : VkBotMessageEvent):
    user = get_user(message.obj['message']['from_id'])
    text = message.obj['message']['text']
    payload = ''
    try:
        payload = json.loads(message.obj['message']['payload'])['button']
    except: pass
    if text == '':
        if len(message.message['attachments']) > 0:
            link = message.message['attachments'][0]['link']['url']
    else:
        link = text
    if text == 'üèõ  –ü–æ–ª–∏—Ç–µ—Ö –∏–º.–ê–ª–µ–∫—Å–µ–µ–≤–∞':
        send_message("–ú–µ–Ω—é –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–º–µ–Ω–∏ –ê–ª–µ–∫—Å–µ–µ–≤–∞",user,ngtu_keyboard())
    elif text == 'üè£ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ':
        send_message('–ú–µ–Ω—é –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ',user,nngu_keyboard())
    elif text == 'üë¶ –ü–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)':
        send_message("üßì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á. (‚ùó –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö)",user)
        user.last_command = '/set_name'
    elif text == 'üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ':
        send_message(str(user),user)
    elif text == '–ù–∞–∑–∞–¥':
        send_message("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",user,main_keyboard(user))
    elif text == 'üîà –û–ø–æ–≤–µ—â–µ–Ω–∏–µ' or text == "üîá –û–ø–æ–≤–µ—â–µ–Ω–∏–µ":
        if user.notification:
            user.notification = False
            send_message("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã!",user,main_keyboard(user))
        else:
            user.notification = True
            send_message("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã!",user,main_keyboard(user))
    elif text == 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å':
        send_message("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ.\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: https://enter.unn.ru/preport/stat/abit.php?id=281474976795355",user)
        user.last_command = '/link_nngu'
    elif text == 'üîù –ú–µ—Å—Ç–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º':
        from NGTU import GetInfoForEnrolle
        response = "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏–º. –ê–ª–µ–∫—Å–µ–µ–≤–∞: \n\n"
        for i,link_ngtu in enumerate(user.get_user_links_ngtu()):
            info = GetInfoForEnrolle(link_ngtu,user.full_name)
            if info != None:
                response += str(i+1) + '. ' + GetInfoForEnrolle(link_ngtu,user.full_name)
        response += '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ:\n\n' + PlacesPersToString(user.link_nngu)
        send_message(response,user)
    elif text == 'üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏':
        send_message(text,user,links_ngtu(message.obj['message']['id']))
    elif user.last_command == '/set_name':
        user.full_name = text
        user.last_command = ''
        send_message("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",user)
    elif user.last_command == '/link_nngu':
        if LinkAvailable(link):
            add_link_nngu(link, user.link_nngu)
            user.link_nngu = link
            send_message("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ!",user)
        else:
            send_message("‚õî –°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\n –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://enter.unn.ru/preport/stat/abit.php?id=281474976795355", user)
        user.last_command = ''
    elif user.last_command == '/add_link_ngtu':
        from NGTU import LinkAvailableNGTU
        if LinkAvailableNGTU(link):
            user.add_link_ngtu(link)
            add_link_ngtu(link)
            send_message("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ –∏–º. –ê–ª–µ–∫—Å–µ–µ–≤–∞!",user)
        else:
            send_message("‚õî –°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\n –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://abit.nntu.ru/info/bak/rating/?learn_form_id=0&fac_id=281474976714124&specialization=&spec_id=281474976710709&commerce=1",user)
        user.last_command = ''
    elif 'add_link_ngtu' in payload:
        send_message("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å –≤–∞—à–∏–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://abit.nntu.ru/info/bak/rating/?learn_form_id=0&fac_id=281474976714124&specialization=&spec_id=281474976710709&commerce=1",user)
        user.last_command = '/add_link_ngtu'
        vk.messages.delete(message_ids=payload.split(':')[1], group_id=GROUP_ID, delete_for_all=1)
    elif 'delete_link_ngtu_opr' in payload:
        try:
            this_link = Link.select().where(Link.id == payload.split(':')[1]).get()
            delete_link_ngtu(this_link.link)
            user.delete_link_ngtu(this_link.link)
        except: pass
        send_message("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å—Å—ã–ª–∫—É!",user)
        vk.messages.delete(message_ids = payload.split(':')[2],group_id = GROUP_ID,delete_for_all = 1)
    elif 'delete_link_ngtu' in payload:
        send_message("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",user,delete_links_ngtu(user,message.obj['message']['id']))
        vk.messages.delete(message_ids=payload.split(':')[1], group_id=GROUP_ID, delete_for_all=1)
    elif 'hiden' in payload:
        vk.messages.delete(message_ids=payload.split(':')[1], group_id=GROUP_ID, delete_for_all=1)
    else:
        send_message("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", user, main_keyboard(user))
    user.save()

def handler_message():
    longpoll = VkBotLongPoll(vk_session, GROUP_ID)
    _server, _key, _ts = longpoll.server, longpoll.key, longpoll.ts
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            Thread(target=handler_command, args=[event]).start()

def send_message(message, user, keyboard = None) :
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –í–∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ user_id """
    try:
        if keyboard == None:
            msg = vk.messages.send(peer_id=user.id,
                             message=message,
                             random_id=get_random_id())
        else:
            msg = vk.messages.send(peer_id=user.id,
                             message=message,
                             keyboard=keyboard,
                             random_id=get_random_id())
        return
    except Exception as e: logging.error(e)

def ThreadSchedule():
    from Enrollee import update_links
    update_links()
    find_change_position()
    schedule.every().minute.do(update_links)
    #schedule.every().minute.do(find_change_position)
    while True:
        schedule.run_pending()
        time.sleep(1)

def find_change_position():
    from NGTU import GetInfoForEnrolle
    from NNGU import GetEnroolee
    for user in User.select():
        old_positions = user.old_position_link_ngtu()
        for link_ngtu in user.get_user_links_ngtu():
            try:
                string_format,position_with_original = GetInfoForEnrolle(link_ngtu,user.full_name,True)
                if old_positions[link_ngtu] != str(position_with_original):
                    send_message("‚ùó‚ùó –ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!\n" + string_format[0:-2] + "\n–°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è: " + str(old_positions[link_ngtu]) + "\n‚ùó‚ùó",user)
                    user.change_position_ngtu(link_ngtu,position_with_original)
            except: pass

            
            
Thread(target= ThreadSchedule).start()
handler_message()
